# -*- coding= utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http=//tiny.be>).
#
#    This program is free software= you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http=//www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
# from osv import fields,osv --- <8.0.X
from odoo import api, fields, models
from odoo.exceptions import ValidationError
#from Datetime import Date, Datetime,timedelta
##############from odoo.addons.jasper_reports import jasper_report
#from odoo import pooler
#from Datetime import  Datetime
from time import time
from datetime import datetime
formatter_string = "%d-%m-%y" 
#from tools.translate import_
#from odoo import tools
import sys
#reload(sys)
#sys.setdefaultencoding("utf-8")
#Importamos la libreria logger
import logging

#Definimos la Variable Global
_logger = logging.getLogger(__name__)
  



class bienes_vehiculos(models.Model):
    """Registro de Bienes"""
    _name = 'bienes_vehiculos'
    _rec_name = 'bienes_numbien'
    _order = 'bienes_numbien'  
   

    
    bienes_numbien = fields.Char(string='Numero del Bien',size=20, required=True,
                     help='Registra el Numero de Bien Nacional')
    bienes_nombre  = fields.Text('Descripción del Bien', size=300, required=True, 
                                  help='Registra la Descripción del Bien')                     
                     
   # secuence  = fields.Char('Sequence',   readonly=True)
    
    bienes_ubica  = fields.Many2one('ubicacion_fisica', 'Ubicación Fisica del Bien', size=3, help='Registra la Ubicación Física del Bien')
    ubicacion_fisica_codigo = fields.Char(string='Codigo de la Ubicacion Física', size=3,
                                          help='Registra el Codigo de la Ubicacion Física (Interno)')
    
    tipo_bien_id      = fields.Many2one('tipo_bien', 'Código del Tipo de Bien', required=True, size=10, default=1, 
                                        help='Registra el Código del Tipo de Bien')
    tipo_bien_codigo = fields.Char(string='Codigo del Tipo de Bien',size=10,required=True, default='1', 
                                    help='Registra el Codigo del Tipo de Bien')

    grupo_bien_id = fields.Many2one('grupo_bien', 'Grupo del Bien', size=3, domain="[('grupo_bien_codigo','=',5)]", required=True,help='Registra el Grupo al Cual Pertenece el Bien')   
    grupo_bien_codigo =  fields.Char(string='Codigo del Grupo',size=3,  required=True,help='Registra el Codigo del Grupo (Interna)')


    clasificador_bien_id = fields.Many2one('clasificador_bien', 'Clasificador del Bien',required=True, domain="[('grupo_bien_id','=',grupo_bien_id)]", size=3, help='Registra el Codigo de Clase del Bien')
    clasificador_codigo = fields.Char(string='Codigo de la Clase', size=3, required=True,
                                      help='Registra el Codigo de la Clase del Bien (Interna)')

    modelo_bien_id = fields.Many2one('modelo_bien', 'Modelo del Bien', size=3,required=True, domain="[('clasificador_id','=',clasificador_bien_id)]", help='Registra el Modelo del Bien')   
    modelo_codigo = fields.Char(string='Codigo del Modelo',size=3, required=True,
                    help='Registra el Codigo del Modelo (Interno)')

    detalle_modelo_id = fields.Many2one('detalle_modelo_bien', 'Tipo de Automóvil Según su Uso', size=3, 
                                        required=True, domain="[('modelo_id','=',modelo_bien_id)]", help='Registra el Modelo Específico del Bien')
    detalle_modelo_codigo = fields.Char(string='Codigo del Detalle', size=3,
                                        help='Registra el Codigo del Detalle del Modelo de Bienes (Interno)') 

    color_id = fields.Many2one('color', 'Color del Bien', size=3, help='Registra el Color del Bien', required=True)
    color_codigo = fields.Char(string='Codigo del Color', size=3, required=True,
                    help='Registra el Codigo de Color (Interno)')

    bienes_oficinas_id = fields.Many2one('oficinas', 'Oficina', size=3, required=True, domain="[('sedes_id','=',bienes_sedes_id)]",help='Registra la Oficina donde esta Ubicado el Bien')
    bienes_oficinas_codigo = fields.Char(string='Nomenclatura de la Oficina',size=20,required=True, help='Registra la Nomenclatura de la Oficina')


    bienes_sedes_id  = fields.Many2one('sedes',string='Sedes del Ministerio', required=True, domain="[('regiones_id','=',bienes_regiones_id)]",help='Registra el Codigo de Vinculacion con las Sedes del Ministerio')
    bienes_sedes_codigo = fields.Char(string='Código de la Sede',size=7,required=True, help='Registra el Código de la Sede')


    bienes_regiones_id  = fields.Many2one('regiones',string= 'Regiones de Ubicación de la Sede',size=3, required=True ,help='Regiones de Ubicación de la Sede')    
    bienes_regiones_codigo       = fields.Char(string='Codigo de la Región',size=3,required=True, help='Registra el Codigo de la Región')


    resp_uso_id = fields.Many2one('personas', 'Responsable de Uso', size=3, required=True, domain="[('personas_oficinas_id','=',bienes_oficinas_id)]",help='Registra el Responsable del Uso del Bien')
    cedu_resp_uso = fields.Integer(string='Cédula del Responsable de Uso',size=10,required=True, help='Registra la Cedula de la persona')

    marcas_id = fields.Many2one('marcas', 'Marca del Bien', required=True, size=3, help='Registra la Marca del Bien')
    marcas_codigo = fields.Char(string='Codigo de la Marca',
                    size=3,
                    required=True,
                    help='Registra el Codigo de la Marca')

    modelo_fab_id = fields.Many2one('modelo_fab', 'Modelo de Fábrica', required=True, size=3, domain="[('marcas_id','=',marcas_id)]", help='Registra el Modelo de Fábrica del Bien')
    modelo_fab_codigo = fields.Char(string='Codigo del Modelo',
                         size=3,
                         required=True,help='Registra el Codigo del Modelo de Fabrica')
    costo = fields.Float('Costo de Bien', help='Registra el Costo del Bien', required=True, digits=(20, 7))
    
    estatus_uso_id = fields.Many2one('estatus_uso', 'Estatus de Uso', size=3, required=True, help='Registra el Estatus de Uso del Bien ')
    estatus_uso_codigo = fields.Char(string='Codigo del Estatus de Uso',size=3,required=True, help='Registra el Codigo de uso del bien')

    estado_bien_id = fields.Many2one('estado_bien', 'Estado del Bien', size=3, required=True, help='Registra el Estado del Bien')
    estado_bien_codigo = fields.Char(string='Codigo del Estado del Bien',size=3,required=True, help='Registra el Codigo del Estado del Bien')


    condicion_fisica_id = fields.Many2one('condicion_fisica', 'Condicion Física del Bien', required=True, size=3,help='Registra la Condicion Física del Bien')
    condicion_fisica_codigo = fields.Char(string='Codigo de la Condicion Fisica del Bien',size=3,required=True, help='Registra el Codigo de la Condicion Fisica del Bien')

    detalle_adquisi_id = fields.Many2one('detalle_adquisi', 'Detalle de Aquisición del Bien', required=True, size=3,help ='Registra el detalle de la Adquisición del Bien')
    detalle_adquisi_codigo   = fields.Char(string='Código del Detalle',size=12,
                              help='Registra el Codigo del Detalle de la Adquisicion del Bien')

    forma_adquisicion_codigo = fields.Char(string='Codigo de la Forma de Adquisicion',size=3, help='Registra el Codigo de la Forma de Adquisicion')

    catalogo_sudebi_id = fields.Many2one('catalogo_sudebi', 'Categoría  General(SUDEBIP)', required=True, domain="[('catalogo_sudebi_codigo','=','15000-0000')]",help='Registra el Catalogo General de la SUDEBIP')
    catalogo_sudebi_codigo   = fields.Char(string='Codigo de la Categoria',size=10,required=True, help='Codigo de la Categoria General de la (SUDEBIP)')

    catalogo_sudebi_sub_id = fields.Many2one('catalogo_sudebi_sub','Categoría  Sub-General(SUDEBIP)', required=True, domain="[('catalogo_sudebi_id','=',catalogo_sudebi_id)]", help='Registra la Categoria Sub- General de la SUDEBIP')
    catalogo_sudebi_sub_codigo  = fields.Char(string='Codigo de la SubCategoria',size=10,required=True, help='Codigo de la Categoria Sub-General de la (SUDEBIP)')


    catalogo_sudebi_esp_id = fields.Many2one('catalogo_sudebi_esp','Categoría  Específica (SUDEBIP)', required=True, domain="[('catalogo_sudebi_sub_id','=',catalogo_sudebi_sub_id)]",help='Registra la Categoria Específica de la SUDEBIP')
    catalogo_sudebi_esp_codigo   = fields.Char(string='Codigo de la Categoria Específica',size=10, help='Codigo de la Categoria Especifica de la (SUDEBIP)')


    color_sudebi_id = fields.Many2one('color_sudebi','Color segun (SUDEBIP)', required=True, help='Registra el Color segun SUDEBIP')
    color_sudebi_codigo = fields.Char(string='Codigo del Color segun Sudebip',size=3, help='Registra el Codigo de Color segun (SUDEBIP)')

    clase_sudebi_id = fields.Many2one('clase_sudebi','Clases de Vehículos segun (SUDEBIP)', required=True, help='Registra la Clase de Vehículos segun la SUDEBIP')
    clase_sudebi_codigo = fields.Char(string='Codigo de la  Clase segun Sudebip',size=3, help='Registra el Codigo de Color segun (SUDEBIP)')
    otra_clase = fields.Char('Otra Clase de Vehículo',size=100,help='Registra Otra Clase de Vehículo')

    poliza_id = fields.Many2one('poliza','Poliza de Seguro', size=3)
    poliza_codigo        = fields.Char(string='Codigo de la Poliza',size=3, help='Registra el Codigo de la Poliza')


    ano_fab =fields.Integer('Año de Fabricación', required=True, size=4,  help='Registra el año de Fabricación del Bien')
    serial_carro = fields.Char('Serial de Carrocería',size=50, required=True, help='Registra el Serial de la Carrocería')
    serial_motor = fields.Char('Serial del Motor',size=50, required=True, help='Registra el Serial del Motor del Bien')
    cantidad_motores =  fields.Integer('Cantidad de Motores',size=1, required=True, help='Registra la cantidad de Motorese del Vehículo') 

    placas = fields.Char('Placa del Vehiculo',size=20, required=True, help='Registra las Placas o Siglas del Bien')
    titulo_prop = fields.Char('Número del Título de Propiedad o Certificado de Orígen', required=True, size=30,help='Registra el Número del Título de Propiedad o el Certificado de Orígen')
    capacidad = fields.Char('Registra la Capacidad del Bien', size=50, required=True,  help='Registra la Capacidad del Bien')
    nombre_bien =  fields.Char('Nombre dado al Bien',size=50,help='Registra Nombre dado al Bien')

    clase_vehiculo = fields.Char('Registra la Clase del Vehículo',size=50,help='Registra la Capacidad del Bien')
    nro_puestos  = fields.Integer('Número de Puestos del Vehículo',size=2, help='Registra el Número de Puestos del Vehículo') 
    tipo_vehiculo = fields.Char('Registra el Tipo del Vehículo',size=50,help='Registra el Tipo del Vehículo')
    uso = fields.Char('Registra el Uso del Bien',size=50,help='Registra el Uso del Bien')
    garantia = fields.Integer('Garantía',size=5,help='Registra la Garantía del Bien')
    unidad_garantia = fields.Selection([('1','Días'),('2','Meses'),('3','Años'),('99',"No Aplica")],'Unidad de Garantía',size=2,help='Registra la Unidad de Medida de la Garantía')
    fecha_ini_garantia = fields.Date('Fecha Inicio de la Garantía', size=8,help='Registra la Fecha de Inicio de la Garantía')
    fecha_fin_garantia = fields.Date('Fecha Fin de la Garantía', size=8,help='Registra la Fecha de Fin de la Garantía')
    rastreo = fields.Selection([('S','Si'),('N','No')],'Sistema de Rastreo', required=True, size=1, help='Registra si la Unidad tiene Sistema de Rastreo')
    desc_rastreo = fields.Char('Especificación del Sistema de Rastreo', size=255, help='Registra la Especificación del Sistema de Rastreo')
    fech_inventario = fields.Date('Fecha de Registro en el Inventario', required=True, size=8,
                                  help='Registra la Fecha de Registro en el Inventario de la Oficina')   
    observacion =   fields.Text('Observaciones al Bien', help='Registra las Observaciones al Bien')
    active = fields.Boolean ('Activo', default=True, help='Si esta Activo el motro lo icluira en la vista')    
    tipo_estatus_inventario_id = fields.Many2one('tipo_estatus_inventario','Estatus de Inventario del Bien', 
                                 required=True, default=1)
    cod_estatus = fields.Char('Codigo del Estatus del Inventario',size=100, default='01', 
                               help='Registra el Codigo del Estatus de Inventario')

    sw_desin = fields.Boolean ('Desincorporado', help='Registra si el bien fue Desincorporado')    
    #active   = fields.Boolean ('Activo', help='Específica si se va aver en las consultas') 
    image = fields.Binary("Foto", attachment=True,required=True,
        help="This field holds the image used as logo for the brand, limited to 1024x1024px.")



    sw_num_bien = fields.Integer(default = 0) 
    sw_desin = fields.Boolean ('Desincorporado',  default = lambda self:'True', help='Registra si el bien fue Desincorporado')    
    active = fields.Boolean ('Activo', default=True, help='Si esta Activo el motro lo icluira en la vista')    
     
    _defaults = { 
         'sw_desin': False,
         'active': True,
          'estatus_inventario': 'INVENTARIO', }



    @api.onchange('bienes_numbien')
    def onchange_bienes_numbien(self):
        if self.bienes_numbien:
            num_bien = self.bienes_numbien
            domain = [('bienes_numbien','=',num_bien)]            
            recordset= self.env['bienes_vehiculos'].search(domain)
            if recordset:
                self.bienes_numbien = ""
                for registro in recordset:
                    mensaje = "El número de bien [" + registro['bienes_numbien']  + "] ya se encuentra registrado"  
                    warning = {
                        'title': "Advertencia!",
                        'message': mensaje,
                }    
                return {'warning': warning }
    


    #@api.onchange('bienes_numbien')
    #def onchange_bienes_numbien(self):
    #    if self.bienes_numbien:
    #        num_bien = self.bienes_numbien
    #        domain = [('numbien','=',num_bien)]            
    #        recordset= self.env['control_bienes'].search(domain)
    #        if recordset:
    #            self.bienes_numbien = ""
    #            for registro in recordset:
    #                mensaje = "El número de bien registrado [" + registro['numbien']  + "] ya se encuentra registrado como un Bien [" + registro['tipo_bienes'] + "]"  
    #                warning = {
    #                    'title': "Advertencia!",
    #                    'message': mensaje,
    #           }    
    #            return {'warning': warning }    
          
          
          
    #@api.model
    #def create(self, value):
    #    diccionario = {'numbien': value['bienes_numbien'], 
    #                        'tipo_bienes': 'VEHICULO',
    #    }
    #    registro = self.env['control_bienes'].create(diccionario)  
    #    rec = super(bienes_vehiculos, self).create(value)
    #    return rec
        
          


    @api.onchange('bienes_regiones_id')
    def onchange_bienes_regiones(self):
        codigor= ''
        codigor = self.bienes_regiones_id.regiones_codigo
        self.bienes_regiones_codigo =  codigor

    @api.onchange('bienes_sedes_id')
    def onchange_bienes_sedes(self):
        codigos= ''
        codigos = self.bienes_sedes_id.sedes_codigo
        self.bienes_sedes_codigo =  codigos
    
    @api.onchange('bienes_oficinas_id')
    def onchange_bienes_oficinas(self):
        codigoo= ''
        codigoo = self.bienes_oficinas_id.oficinas_codigo
        self.bienes_oficinas_codigo =  codigoo

    @api.onchange('resp_uso_id')
    def onchange_resp_uso(self):
        codigore= ''
        codigore = self.resp_uso_id.personas_cedula
        self.cedu_resp_uso =  codigore


    @api.onchange('tipo_bien_id')
    def onchange_tipo_bien(self):
        codigo= ''
        codigo = self.tipo_bien_id.tipo_bien_codigo
        self.tipo_bien_codigo =  codigo

    @api.onchange('bienes_ubica_id')
    def onchange_bienes_ubica(self):
        codigo= ''
        codigo = self.bienes_ubica_id.ubicacion_fisica_codigo
        self.ubicacion_fisica_codigo =  codigo


    @api.onchange('grupo_bien_id')
    def onchange_grupo(self):
        codigo= ''
        codigo = self.grupo_bien_id.grupo_bien_codigo
        self.grupo_bien_codigo =  codigo
        self.clasificador_bien_id = ''


    @api.onchange('clasificador_bien_id')
    def onchange_clasif(self):
        codigoc= ''
        codigoc = self.clasificador_bien_id.clasificador_codigo
        self.clasificador_codigo =  codigoc
        self.modelo_bien_id =  ''

    
    @api.onchange('modelo_bien_id')
    def onchange_modelo(self):
        codigom= ''
        codigom = self.modelo_bien_id.modelo_codigo
        self.modelo_codigo =  codigom
        self.detalle_modelo_id =  ''
    
    @api.onchange('grupo_bien_id','clasificador_bien_id','modelo_bien_id','detalle_modelo_id','material_id','placas','color_id')
    def onchange_categorias(self):
        catego =''
        detamod = ''
        if self.clasificador_bien_id.clasificador_nombre:
            catego += str(self.clasificador_bien_id.clasificador_nombre)
        if self.modelo_bien_id.modelo_nombre:
              catego += ' -- '+ str(self.modelo_bien_id.modelo_nombre)
        if self.detalle_modelo_id.detalle_modelo_nombre:
            if self.detalle_modelo_id.detalle_modelo_nombre != False:
                self.detalle_modelo_codigo = self.detalle_modelo_id.detalle_modelo_codigo
                catego += '  -- '+str(self.detalle_modelo_id.detalle_modelo_nombre)
        if self.placas:
            cadena = str(self.placas)
            cadena = cadena.upper() 
            catego += ' --  PLACAS: '+cadena
            self.placas = cadena
        if  self.color_id.color_nombre:
            catego += '  -- '+str(self.color_id.color_nombre)
            
        self.bienes_nombre = catego
        self.active = 'true'



    @api.onchange('cantidad_motores')
    def onchange_cantidad_motores(self):
        if (self.cantidad_motores > 4):
            raise ValidationError('La cantidad de motores no puede ser mayor a 4!')
    
    @api.onchange('color_id')
    def onchange_color(self):
        codigoco= ''
        codigoco = self.color_id.color_codigo
        self.color_codigo =  codigoco


    @api.onchange('estatus_uso_id')
    def onchange_estatus_uso(self):
        codigo= ''
        codigo = self.estatus_uso_id.estatus_uso_codigo
        self.estatus_uso_codigo =  codigo

    @api.onchange('estado_bien_id')
    def onchange_estado_bien(self):
        codigo= ''
        codigo = self.estado_bien_id.estado_bien_codigo
        self.estado_bien_codigo =  codigo   

    @api.onchange('condicion_fisica_id')
    def onchange_condicion_fisica(self):
        codigo= ''
        codigo = self.condicion_fisica_id.condicion_fisica_codigo
        self.condicion_fisica_codigo =  codigo

    @api.onchange('detalle_adquisi_id')
    def onchange_detalle_adquisi(self):
        codigo= ''
        codigoad =''
        codigo = self.detalle_adquisi_id.detalle_adquisi_codigo
        codigoad = self.detalle_adquisi_id.codigo_ad
        self.detalle_adquisi_codigo =  codigo
        self.forma_adquisicion_codigo = codigoad


    @api.onchange('catalogo_sudebi_id')
    def onchange_catalogo_sudebi(self):
        codigo= ''
        codigo = self.catalogo_sudebi_id.catalogo_sudebi_codigo
        self.catalogo_sudebi_codigo =  codigo

    @api.onchange('catalogo_sudebi_sub_id')
    def onchange_catalogo_sudebi_sub(self):
        codigo= ''
        codigo = self.catalogo_sudebi_sub_id.catalogo_sudebi_sub_codigo
        self.catalogo_sudebi_sub_codigo =  codigo

    @api.onchange('catalogo_sudebi_esp_id')
    def onchange_catalogo_sudebi_esp(self):
        codigo= ''
        codigo = self.catalogo_sudebi_esp_id.catalogo_sudebi_esp_codigo
        self.catalogo_sudebi_esp_codigo =  codigo


    @api.onchange('color_sudebi_id')
    def onchange_color_sudebi(self):
        codigo= ''
        codigo = self.color_sudebi_id.color_sudebi_codigo
        self.color_sudebi_codigo =  codigo


    @api.onchange('poliza_id')
    def onchange_poliza(self):
        codigo= ''
        codigo = self.poliza_id.poliza_codigo
        self.poliza_codigo =  codigo
  
    @api.onchange('tipo_estatus_inventario_id')
    def onchange_tipo_estatus_inventario(self):
        codigo= ''
        codigo = self.tipo_estatus_inventario_id.cod_estatus
        self.cod_estatus =  codigo
    
    @api.onchange('marcas_id')
    def onchange_marcas(self):
        codigo= ''
        codigo = self.marcas_id.marcas_codigo
        self.marcas_codigo =  codigo

    @api.onchange('modelo_fab_id')
    def onchange_modelo_fab(self):
        codigo= ''
        codigo = self.modelo_fab_id.modelo_fab_codigo
        self.modelo_fab_codigo =  codigo   


    @api.onchange('clase_sudebi_id')
    def onchange_clase_sudebi(self):
        codigocla= ''
        codigocla = self.clase_sudebi_id.clase_sudebi_codigo
        self.clase_sudebi_codigo =  codigocla   







    # @api.model
    # def create(self, vals):
     
    #     vals['bienes_numbien'] = self.env['ir.sequence'].next_by_code('bienes_vehiculos.bienes_numbien')
        
    #     return super(bienes_vehiculos, self).create(vals)
    #     self.bienes_numbien = vals


        






    _sql_constraints = [('bienes_numbien', 'unique(bienes_numbien)', 'El Número de Bien debe se único!')]
 
  

  



    #    'fecha_ini_garantia'= '1900-01-01', 
    #    'fecha_fin_garantia'= '1900-01-01', }
   
   


# class evaluo_vehiculo(models.Model):
#     ##"""Registra  Evalúo y Componente del Vehículo"""###

#     _name = 'evaluo_vehiculo'
#     _rec_name = 'vehiculo_nombre'
#     _order = 'vehiculo_id'  

    
#     vehiculo_sedes_id  = fields.Many2one('sedes',string='Sedes del Ministerio', compute= "compute_generar_bien",required=True,help='Registra el Codigo de Vinculacion con las Sedes del Ministerio')
   
#     vehiculo_regiones_id  = fields.Many2one('regiones',string= 'Regiones de Ubicación de la Sede',size=3,compute= "compute_generar_bien", required=True ,help='Regiones de Ubicación de la Sede')    
    
#     vehiculo_id = fields.Many2one('bienes_vehiculos', 'Vehículo a Evaluar',required=True, help='Registra el Vehículo a Evaluar')
#     vehiculo_nombre  = fields.Text('Descripción del Vehículo', size=300, compute= "compute_generar_bien", required=True,help='Registra la Descripcion del Vehículo')
#     mecanico =  fields.Char('Mecánico del Vehículo',size=50,help='Registra el Nombre del Mecánico del Vehículo')

#     #conjunto_motor_ids = fields.Many2many('conjunto_motor', 'vehiculo_motor_rel','bienes_vehiculos','conjunto_motor_id',string='Conjunto Motor', size=3, required=True,help='Registra el Evalúo del Motor del Vehículo')
#     motor_camara = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Camara del Motor',size=2,help='Registra el estado de la Camara  del Motor')
#     motor_bloque= fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Bloque del Motor',size=2,help='Registra el estado del Bloque del Motor')
#     motor_carter = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Carter del Motor',size=2,help='Registra el estado del Carter del Motor')

#     #   sistema_alineacion_ids = fields.Many2many('sistema_alineacion', 'vehiculo_alineacion_rel','bienes_vehiculos','sistema_alineacion_id',string='Sistema de Alineación', size=3, required=True,help='Registra el Evalúo del Motor del Vehículo')
    
#     inyeccion = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Sistema de Inyección',size=2,help='Registra el estado del Sistema de Inyección')
#     tanque_combustible = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Tanque de Combustible',size=2,help='Registra el estado del Tanque de Combustible')
#  #   sistema_enfriamiento_ids = fields.Many2many('sistema_enfriamiento', 'vehiculo_enfriamiento_rel','bienes_vehiculos','sistema_enfriamiento_id',string='Sistema de Enfriamiento', size=3, required=True,help='Registra el Evalúo del Sistema de Enfriamiento del Vehículo')
#     radiador = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Radiador',size=2,help='Registra el estado del Radiador')
#     bomba_agua = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Bomba de agua',size=2,help='Registra el estado de la Bomba de agua')

# #    sistema_deluces_ids = fields.Many2many('sistema_deluces', 'vehiculo_luces_rel','bienes_vehiculos','sistema_deluces_id',string='Sistema de Luces', size=3, required=True,help='Registra el Evalúo del Sistema de Luces del Vehículo')
#     luces_stop = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Luces de Stop',size=2,help='Registra el estado de las Luces de Stop')
#     luces_delanteras = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Luces Delanteras',size=2,help='Registra el estado de las Luces Delanteras')

# #    sistema_cambios_ids = fields.Many2many('sistema_cambios', 'vehiculo_cambios_rel','bienes_vehiculos','sistema_cambios_id',string='Sistema de Cambios', size=3, required=True,help='Registra el Evalúo del Sistema de Cambios del Vehículo')
#     sistema_cambios = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Sistema de Cambios',size=2,help='Registra el estado del Sistema de Cambios')

# #    sistema_deescape_ids = fields.Many2many('sistema_deescape', 'vehiculo_deescape_rel','bienes_vehiculos','sistema_deescape_id',string='Sistema de Escape', size=3, required=True,help='Registra el Evalúo del Sistema de Escape del Vehículo')
#     multiple = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Múltiple',size=2,help='Registra el estado del Múltiple')
#     silenciador = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Silenciador',size=2,help='Registra el estado del Silenciador')
#     bajante = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Bajante',size=2,help='Registra el estado del Sistema del Bajante')

# #    sistema_transmicion_ids = fields.Many2many('sistema_transmision', 'vehiculo_transmision_rel','bienes_vehiculos','sistema_transmicion_id',string='Sistema de Transmisión', size=3, required=True,help='Registra el Evalúo del Sistema de Transmisión del Vehículo')
#     grupo_diferencial = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Grupo Diferencial',size=2,help='Registra el estado del Grupo Diferencial')
#     cuplo = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Cuplo',size=2,help='Registra el estado del Cuplo')
#     cardan = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Cardan',size=2,help='Registra el estado del Cardan')
#     crucetas = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Crucetas',size=2,help='Registra el estado de las Crucetas')

#   #  accesorios_ids = fields.Many2many('accesorios', 'vehiculo_accesorios_rel','bienes_vehiculos','accesorios_id',string='Accesorios', size=3, required=True,help='Registra el Evalúo de los Accesorios del Vehículo')
#     radio = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Radio',size=2,help='Registra el estado del Radio')
#     antena = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Antena',size=2,help='Registra el estado de la Antena')

# #    sistema_suspension_ids = fields.Many2many('sistema_suspension', 'vehiculo_suspension_rel','bienes_vehiculos','sistema_suspension_id',string='Sistema de Suspención', size=3, required=True,help='Registra el Evalúo del Sistema de Suspensión del Vehículo')

#     tren_delantero = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Tren Delantero',size=2,help='Registra el estado del Tren Delantero')
#     bujes = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Bujes',size=2,help='Registra el estado de los Bujes')
#     ballestas = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Ballestas',size=2,help='Registra el estado de las Ballestas')
#     espirales = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Espirales',size=2,help='Registra el estado de las Espirales')
#     munones_terminales = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Muñones Terminales',size=2,help='Registra el estado de los Muñones Terminales')

# #    aire_acondicionado = fields.Selection([('B','BUENO'),('R','REGULAR'), ('M','MALO'), ('F','FALSO'), ('D','DAÑADO')],string='Aire Acondicionado',required=True,help='Registra el Evalúo del Aire Acondicionado del Vehículo')
#     aire_acondicionado = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Aire Acondicionado',size=2,help='Registra el estado del Aire Acondicionado')

#     vidrios_puertas = fields.Selection([('B','Bueno'),('R','Regular'), ('M','Malo'), ('F','Falso'), ('D','Dañado')],string='Vidrios de las Puertas',help='Registra el Evalúo de los Vidrios de las Puertas del Vehículo')
#     parabrisas = fields.Selection([('B','Bueno'),('R','Regular'), ('M','Malo'), ('F','Falso'), ('D','Dañado')],string='Parabrisas',help='Registra el Evalúo de los Vidrios de los Parabrisas del Vehículo')


#     #sistema_direccion_ids = fields.Many2many('sistema_direccion', 'vehiculo_direccion_rel','bienes_vehiculos','sistema_direccion_id',string='Sistema de Dirección', size=3, required=True,help='Registra el Evalúo del Sistema de Dirección del Vehículo')
    
#     volante = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Volante',size=2,help='Registra el estado del Volante')
#     cajetin = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Cajetin',size=2,help='Registra el estado del Cajetin')
#     bomba_hidraulica = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Bomba Hidraulica',size=2,help='Registra el estado de la Bomba Hidraulica')


#  #   sistema_frenos_ids = fields.Many2many('sistema_frenos', 'vehiculo_frenos_rel','bienes_vehiculos','sistema_frenos_id',string='Sistema de Frenos', size=3, required=True,help='Registra el Evalúo del Sistema de Frenos del Vehículo')
#     cilindros = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Cilindros',size=2,help='Registra el estado de los Cilindros')
#     hidrovac = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Hidrovac',size=2,help='Registra el estado del Hidrovac')
#     bandas_pastillas = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Bandas y Pastillas',size=2,help='Registra el estado de las Bandas y Pastillas')
#     tambores_disco = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Bandas y Pastillas',size=2,help='Registra el estado de los Tambores y Discos')
#     compresor_aire = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Compresor de Aire',size=2,help='Registra el estado del Compresor de Aire')

# #    sistema_electrico_ids = fields.Many2many('sistema_electrico', 'vehiculo_electrico_rel','bienes_vehiculos','sistema_electrico_id',string='Sistema Eléctrico', size=3, required=True,help='Registra el Evalúo del Sistema Eléctrico del Vehículo')
#     cables_terminales = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Cables Bornes y Terminales',size=2,help='Registra el estado de los Cables Bornes y Terminales ')
#     motor_arranque = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Cables Bornes y Terminales',size=2,help='Registra el estado del Motor de Arranque')
#     cableado_electrico = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Cableado Electrico',size=2,help='Registra el estado del Cableado Electrico')
#     distribuidor = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Distribuidor',size=2,help='Registra el estado del Distribuidor')

# #    otros_evaluos_ids = fields.Many2many('otros_evaluos', 'vehiculo_otros_rel','bienes_vehiculos','sistema_otros_id',string='Otros', size=3, required=True,help='Registra el Evalúo del Otras partes del Vehículo')

#     luces_decruces = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Luces de Cruces',size=2,help='Registra el estado de las Luces de Cruces')

#     chasis = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Chasis',size=2,help='Registra el estado del Chasis')
#     rines = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Rines',size=2,help='Registra el estado de los Rines')
#     puertas = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Puertas',size=2,help='Registra el estado de las Puertas')
#     vidrios = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Vidrios',size=2,help='Registra el estado de los Vidrios')
#     tapiceria= fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Tapicería',size=2,help='Registra el estado de la Tapicería')
#     pintura= fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Pintura',size=2,help='Registra el estado de la Pintura')
#     instrumentos= fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Instrumentos',size=2,help='Registra el estado de los Instrumentos')
#     cauchos_delanteros= fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Cauchos Delanteros',size=2,help='Registra el estado de los Cauchos Delanteros')
#     cauchos_traseros= fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Cauchos Traseros',size=2,help='Registra el estado de los Cauchos Traseros')
#     manillas= fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Manillas',size=2,help='Registra el estado de las Manillas')
#     carroceria = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Carrocería',size=2,help='Registra el estado de la Carrocería')
#     parachoques = fields.Selection([('B','Bueno'),('R','Regular'),('M','Malo'),('F',"Falso"),('D','Dañado')],'Parachoques',size=2,help='Registra el estado del Parachoques')

#     @api.one
#     @api.depends('vehiculo_id')
#     def compute_generar_bien(self): 
#        self.vehiculo_nombre = self.vehiculo_id.bienes_nombre
#        self.vehiculo_sedes_id = self.vehiculo_id.bienes_sedes_id
#        self.vehiculo_regiones_id = self.vehiculo_id.bienes_regiones_id
       



# class conjunto_motor(models.Model):
#     """Registro los Evalúos del tipo de motor del vehiculo"""
#     _name = 'conjunto_mot
#     _rec_name = 'conjunto_motor_nombre'
#     conjunto_motor_nombre = fields.Char(string='Items para Evaluar el Motor',size=100,required=True, help='Registra los Items para Evaluar el Motor del Vehículo')
#     _sql_constraints = [('conjunto_motor_nombre','unique(conjunto_motor_nombre)', 'El Nombre debe se único!')]       


# class  sistema_alineacion(models.Model):
#     """Registro los Evalúos del  sistema de alineacion del vehiculo"""
#     _name = 'sistema_alineacion'
#     _rec_name = 'sistema_alineacion_nombre'
#     sistema_alineacion_nombre = fields.Char(string='Items para Evaluar el Sistema de Alineación (tren delantero y eje trasero)',size=100,required=True, help='Registra los Items para Evaluar el Sistema de Alineación del Vehículo (tren delantero y eje trasero)')
#     _sql_constraints = [('sistema_alineacion_nombre','unique(sistema_alineacion_nombre)', 'El Nombre debe se único!')]       


# class  sistema_enfriamiento(models.Model):
#     """Registro los Evalúos del  sistema de Enfriamientodel vehiculo"""
#     _name = 'sistema_enfriamiento'
#     _rec_name = 'sistema_enfriamiento_nombre'
#     sistema_enfriamiento_nombre = fields.Char(string='Items para Evaluar el Sistema de Enfriamiento',size=100,required=True, help='Registra los Items para Evaluar el Sistema de Enfriamiento del Vehículo')
#     _sql_constraints = [('sistema_enfriamiento_nombre','unique(sistema_enfriamiento_nombre)', 'El Nombre debe se único!')]       


# class  sistema_deluces(models.Model):
#     """Registro los Evalúos del  sistema de de Luces del vehiculo"""
#     _name = 'sistema_deluces'
#     _rec_name = 'sistema_deluces_nombre'
#     sistema_deluces_nombre = fields.Char(string='Items para Evaluar el Sistema de Luces',size=100,required=True, help='Registra los Items para Evaluar el Sistema de Luces del Vehículo')
#     _sql_constraints = [('sistema_deluces_nombre','unique(sistema_deluces_nombre)', 'El Nombre debe se único!')]       



# class  sistema_cambios(models.Model):
#     """Registro los Evalúos del  sistema de Cambios del vehiculo"""
#     _name = 'sistema_cambios'
#     _rec_name = 'sistema_cambios_nombre'
#     sistema_cambios_nombre = fields.Char(string='Items para Evaluar el Sistema de Cambios',size=100,required=True, help='Registra los Items para Evaluar el Sistema de Cambios del Vehículo')
#     _sql_constraints = [('sistema_cambios_nombre','unique(sistema_cambios_nombre)', 'El Nombre debe se único!')]       


# class  sistema_deescape(models.Model):
#     """Registro los Evalúos del  sistema de Enfriamientodel vehiculo"""
#     _name = 'sistema_deescape'
#     _rec_name = 'sistema_deescape_nombre'
#     sistema_deescape_nombre = fields.Char(string='Items para Evaluar el Sistema de Escape',size=100,required=True, help='Registra los Items para Evaluar el Sistema de Escape')
#     _sql_constraints = [('sistema_escape_nombre','unique(sistema_deescape_nombre)', 'El Nombre debe se único!')]       


# class  sistema_transmision(models.Model):
#     """Registro los Evalúos del  sistema de Transmición del vehiculo"""
#     _name = 'sistema_transmision'
#     _rec_name = 'sistema_transmision_nombre'
#     sistema_transmision_nombre = fields.Char(string='Items para Evaluar el Sistema de Transmisión',size=100,required=True, help='Registra los Items para Evaluar el Sistema de Transmision del Vehículo')
    
#     _sql_constraints = [('transmision_nombre','unique(sistema_transmision_nombre)', 'El Nombre debe se único!')]       


# class  accesorios(models.Model):
#     """Registro los Evalúos de accesorios del vehiculo"""
#     _name = 'accesorios'
#     _rec_name = 'accesorios_nombre'
#     accesorios_nombre = fields.Char(string='Items para Evaluar los Accesorios',size=100,required=True, help='Registra los Items para Evaluar los Accesorios del Vehículo')
#     _sql_constraints = [('accesorios_nombre','unique(accesorios_nombre)', 'El Nombre debe se único!')]       


# class  sistema_suspension(models.Model):
#     """Registro los Evalúos del  sistema de Suspención del vehiculo"""
#     _name = 'sistema_suspension'
#     _rec_name = 'sistema_suspension_nombre'
#     sistema_suspension_nombre = fields.Char(string='Items para Evaluar el Sistema de Suspención',size=100,required=True, help='Registra los Items para Evaluar el Sistema de Suspensión del Vehículo')
#     _sql_constraints = [('sistema_suspension_nombre','unique(sistema_suspension_nombre)', 'El Nombre debe se único!')]       








# class  sistema_direccion(models.Model):
#     """Registro los Evalúos del  sistema de direccion del vehiculo"""
#     _name = 'sistema_direccion'
#     _rec_name = 'sistema_direccion_nombre'
#     sistema_direccion_nombre = fields.Char(string='Items para Evaluar el Sistema de Dirección',size=100,required=True, help='Registra los Items para Evaluar el Sistema de Dirección del Vehículo')
#     _sql_constraints = [('sistema_direccion_nombre','unique(sistema_direccion_nombre)', 'El Nombre debe se único!')]       



# class  sistema_frenos(models.Model):
#     """Registro los Evalúos del  sistema de frenos del vehiculo"""
#     _name = 'sistema_frenos'
#     _rec_name = 'sistema_frenos_nombre'
#     sistema_frenos_nombre = fields.Char(string='Items para Evaluar el Sistema de Frenos',size=100,required=True, help='Registra los Items para Evaluar el Sistema de Frenos del Vehículo')
#     _sql_constraints = [('sistema_frenos_nombre','unique(sistema_frenos_nombre)', 'El Nombre debe se único!')]       




# class  sistema_electrico(models.Model):
#     """Registro los Evalúos del  sistema electrico del vehiculo"""
#     _name = 'sistema_electrico'
#     _rec_name = 'sistema_electrico_nombre'
#     sistema_electrico_nombre = fields.Char(string='Items para Evaluar el Sistema Eléctrico',size=100,required=True, help='Registra los Items para Evaluar el Sistema Eléctrico del Vehículo')
#     _sql_constraints = [('sistema_electrico_nombre','unique(sistema_electrico_nombre)', 'El Nombre debe se único!')]       



# class   otros_evaluos(models.Model):
#     """Registro los Evalúos del  sistema electrico del vehiculo"""
#     _name = 'otros_evaluos'
#     _rec_name = 'otros_evaluos_nombre'
#     otros_evaluos_nombre = fields.Char(string='Items para Evaluar el Sistema Eléctrico',size=100,required=True, help='Registra los Items para Evaluar Otras partes del Vehículo')
#     _sql_constraints = [('otros_evaluos_nombre','unique(otros_evaluos_nombre)', 'El Nombre debe se único!')]       


# class IrActionsReportXml(models.Model):
#      #_inherit = 'ir.actions.report.xml'
#      report_type = fields.Selection(selection_add=[
#          ('qweb-txt', 'Text'),
#          ('qweb-txt-csv', 'CSV'),
#          ])

#      @api.model
#      def render_report(self, res_ids, name, data):
#          if (
#                  data.get('report_type') and
#                  data.get('report_type').startswith('qweb-txt')):
#              ext = data['report_type'].split('-')[-1]
#              # That way, you can easily add qweb-txt-zpl' or others
#              # without inheriting this method (you just need to do the
# #             # selection_add on the field 'report_type')
#              return self.env['report'].get_html(res_ids, name, data=data), ext
#          else:
#              return super(IrActionsReportXml, self).render_report(
#                  res_ids, name, data)

# class Report(models.Model):
#     # _inherit = "report"

#      @api.model
#      def _get_report_from_name(self, report_name):
#          res = super(Report, self)._get_report_from_name(report_name)
#          if not res:
#              res = self.env['ir.actions.report.xml'].search([
#                  ('report_type', '!=', False),
#                  ('report_name', '=', report_name)], limit=1)
#          return res

